generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum PaymentMethod {
  PIX
  CASH
}

enum PaymentStatus {
  OPEN
  PAID
}

model User {
  id          String   @id @unique @default(uuid()) @db.Uuid
  alma_id     String   @unique @db.Uuid
  name        String   @unique @db.VarChar(250)
  social_name String?  @db.VarChar(250)
  role        UserRole
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt()

  schedulers         Scheduler[]         @relation("SchedulerProfessional")
  appointmentRecords AppointmentRecord[] @relation("AppointmentRecordProfessional")
  payments           Payment[]           @relation("PaymentProfessional")

  @@map("users")
}

model Scheduler {
  id               String   @id @unique @default(uuid()) @db.Uuid
  professional_id  String   @db.Uuid
  client_name      String   @db.VarChar(250)
  client_phone     String   @db.VarChar(15)
  appointment_date String   @db.VarChar(10)
  appointment_time String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt()

  professional       User                @relation("SchedulerProfessional", fields: [professional_id], references: [id])
  appointmentRecords AppointmentRecord[] @relation("AppointmentRecordScheduler")

  @@map("schedules")
}

model AppointmentRecord {
  id              String   @id @unique @default(uuid()) @db.Uuid
  professional_id String   @db.Uuid
  schedule_id     String   @unique @db.Uuid
  record          String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt()

  professional        User      @relation("AppointmentRecordProfessional", fields: [professional_id], references: [id])
  appointment         Scheduler @relation("AppointmentRecordScheduler", fields: [schedule_id], references: [id])
  appointmentPayments Payment[] @relation("AppointmentPayment")

  @@map("appointment_records")
}

model Payment {
  id              String        @id @unique @default(uuid()) @db.Uuid
  professional_id String        @db.Uuid
  appointment_id  String        @unique @db.Uuid
  payment_date    String        @db.VarChar(10)
  payment_method  PaymentMethod
  total_paid      String
  status          PaymentStatus
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt()

  professional User              @relation("PaymentProfessional", fields: [professional_id], references: [id])
  appointment  AppointmentRecord @relation("AppointmentPayment", fields: [appointment_id], references: [id])

  @@map("payments")
}
