{
  "openapi": "3.0.0",
  "info": {
    "title": "LUMIN Backend API Documentation",
    "description": "Back-end API to manage appointment records and streamline payment transactions for healthcare professionals.",
    "contact": {
      "name": "Rafael Ribeiro",
      "url": "https://www.wophi.be/lumin/support",
      "email": "lumin@wophi.be"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/users/admin": {
      "post": {
        "summary": "Create a new admin user",
        "description": "Route to register new admin users",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              },
              "examples": {
                "example1": {
                  "summary": "Example of a valid user registration",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "JD",
                    "username": "johndoe",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "email": "johndoe@example.com",
                    "phone": "1234567890",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                },
                "example2": {
                  "summary": "Example of required fields only",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "motherName": "Jane Doe",
                    "email": "johndoe@example.com",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": ["One or more fields are missing or invalid"],
                    "code": "bad.request",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not created",
                    "code": "user-repository.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/client": {
      "post": {
        "summary": "Create a new client user",
        "description": "Route to register new client users",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              },
              "examples": {
                "example1": {
                  "summary": "Example of a valid user registration",
                  "value": {
                    "firstName": "Riley",
                    "lastName": "Doe",
                    "socialName": "RD",
                    "username": "rileydoe",
                    "bornDate": "1991-01-01",
                    "motherName": "Jane Doe",
                    "email": "rileydoe@example.com",
                    "phone": "1234567890",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                },
                "example2": {
                  "summary": "Example of required fields only",
                  "value": {
                    "firstName": "Riley",
                    "lastName": "Doe",
                    "motherName": "Jane Doe",
                    "email": "rileydoe@example.com",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": ["One or more fields are missing or invalid"],
                    "code": "bad.request",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not created",
                    "code": "user-repository.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/user/{id}": {
      "get": {
        "summary": "Get user by id",
        "description": "Route to get an user by id",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                },
                "example": {
                  "id": "123456",
                  "name": "Riley Doe",
                  "socialName": "RD",
                  "bornDate": "1991-01-01",
                  "motherName": "Jane Doe",
                  "email": "rileydoe@example.com",
                  "phone": "1234567890",
                  "status": "ACTIVE",
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-11T12:00:00Z"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "could not get user",
                    "code": "user-repository.getUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/professional/{id}": {
      "get": {
        "summary": "Get professional clients",
        "description": "Route to get all professional clients",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Professional clients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalClients"
                },
                "example": {
                  "professionalId": "314",
                  "clients": [
                    {
                      "id": "123456",
                      "name": "Riley Doe",
                      "phone": "1234567890"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "could not get clients",
                    "code": "user-repository.getClients",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/update/{id}": {
      "patch": {
        "summary": "Update user info",
        "description": "Route to update user data",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "examples": {
                "example1": {
                  "summary": "Example of updating password",
                  "value": {
                    "oldPassword": "password123",
                    "newPassword": "newpassword",
                    "passwordConfirmation": "newpassword"
                  }
                },
                "example2": {
                  "summary": "Example of updating username",
                  "value": {
                    "username": "RDJ"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedUser"
                },
                "example": {
                  "id": "123456",
                  "personal": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "RDJ",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "contact": {
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "updatedAt": "2023-05-13T12:00:00Z"
                  },
                  "security": {
                    "status": "ACTIVE",
                    "updatedAt": "2023-05-11T12:00:00Z"
                  },
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-13T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "missing old password propertie",
                    "value": {
                      "error": {
                        "message": "missing 'oldPassword' field",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "new passwords do not match",
                    "value": {
                      "error": {
                        "message": "new passwords do not match",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "old passwords do not match",
                    "value": {
                      "error": {
                        "message": "old passwords do not match",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "conflict",
                    "value": {
                      "error": {
                        "message": "email/phone already taken",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example5": {
                    "summary": "not modified",
                    "value": {
                      "error": {
                        "message": "user not updated",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not updated",
                    "code": "user-repository.updateUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },

    "/auth/signin": {
      "post": {
        "summary": "User login",
        "description": "Authenticate a user with the provided credentials",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              },
              "example": {
                "email": "johndoe@example.com",
                "password": "password123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "email or password is invalid",
                    "code": "auth-repository.signIn",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error",
                    "code": "auth-repository.signIn",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },

    "/schedules/create": {
      "post": {
        "summary": "Create a new appointment",
        "description": "Route to book a new appointment time",
        "tags": ["Scheduler"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointment"
              },
              "examples": {
                "example1": {
                  "summary": "Example 1 of a valid appointment request",
                  "value": {
                    "clientName": "Riley Doe",
                    "clientPhone": "1234567890",
                    "appointmentDate": "2023-08-03",
                    "appointmentTime": "09:00"
                  }
                },
                "example2": {
                  "summary": "Example 2 of a valid appointment request",
                  "value": {
                    "clientName": "Riley Doe",
                    "clientPhone": "1234567890",
                    "appointmentDate": "2023-08-03",
                    "appointmentTime": "15:30"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Appointment booked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAppointment"
                },
                "example": {
                  "id": "123456",
                  "professionalId": "78910",
                  "clientName": "Riley Doe",
                  "clientPhone": "1234567890",
                  "appointmentDate": "2023-08-03",
                  "appointmentTime": "09:00",
                  "createdAt": "2023-07-20T12:00:00Z",
                  "updatedAt": "2023-07-20T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "Missing parameter",
                    "value": {
                      "error": {
                        "message": "missing query parameter [professionalId]",
                        "code": "appt-module.createAppointment",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid date or time",
                    "value": {
                      "error": {
                        "message": "appointment date and time must be after the current date and time",
                        "code": "appt-module.createAppointment",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "an appointment already exists at this time",
                    "code": "scheduler-repository.createAppt",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to create appointment",
                    "code": "scheduler-repository.createAppt",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/schedules/professional/:id": {
      "get": {
        "summary": "Get all appointments",
        "description": "Route to find all professional appointments",
        "tags": ["Scheduler"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All professional appointments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalAppointments"
                },
                "examples": {
                  "example1": {
                    "summary": "Example of found appointments",
                    "value": {
                      "appointments": [
                        {
                          "id": "123456",
                          "professionalId": "78910",
                          "clientName": "Riley Doe",
                          "clientPhone": "1234567890",
                          "appointmentDate": "2023-08-03",
                          "appointmentTime": "09:00",
                          "createdAt": "2023-07-20T12:00:00Z",
                          "updatedAt": "2023-07-20T12:00:00Z"
                        }
                      ]
                    }
                  },
                  "example2": {
                    "summary": "Example of appointments not found",
                    "value": {
                      "appointments": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to get appointments",
                    "code": "scheduler-repository.findAllAppts",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/schedules/professional/filter/:id": {
      "get": {
        "summary": "Get an appointment by filter",
        "description": "Route to find an appointment by filter",
        "tags": ["Scheduler"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "name of the client",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentDate",
            "in": "query",
            "description": "appointment date booked",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentTime",
            "in": "query",
            "description": "appointment time booked",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Appointments found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalAppointments"
                },
                "example": {
                  "appointments": [
                    {
                      "id": "123456",
                      "professionalId": "78910",
                      "clientName": "Riley Doe",
                      "clientPhone": "1234567890",
                      "appointmentDate": "2023-08-03",
                      "appointmentTime": "09:00",
                      "createdAt": "2023-07-20T12:00:00Z",
                      "updatedAt": "2023-07-20T12:00:00Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to get appointment",
                    "code": "scheduler-repository.getApptByFilter",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/schedules/update/:appointmentId": {
      "patch": {
        "summary": "Update an appointment",
        "description": "Route to update an appointment",
        "tags": ["Scheduler"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppointment"
              },
              "example": {
                "clientPhone": "1234567811",
                "appointmentDate": "2023-08-02",
                "appointmentTime": "09:00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Appointment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAppointment"
                },
                "example": {
                  "id": "123456",
                  "professionalId": "78910",
                  "clientName": "Riley Doe",
                  "clientPhone": "1234567811",
                  "appointmentDate": "2023-08-02",
                  "appointmentTime": "09:00",
                  "createdAt": "2023-07-20T12:00:00Z",
                  "updatedAt": "2023-07-22T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "missing query parameter [professionalId]",
                    "code": "appt-module.updateAppointment",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "an appointment already exists at this time",
                    "code": "appt-module.updateAppointment",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to update appointment",
                    "code": "scheduler-repository.updateAppointment",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/schedules/delete/:appointmentId": {
      "delete": {
        "summary": "Delete an appointment",
        "description": "Route to cancel an appointment",
        "tags": ["Scheduler"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment successfully cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedAppointment"
                },
                "example": {
                  "Appointment deleted": {
                    "id": "123456",
                    "professionalId": "78910",
                    "clientName": "Riley Doe",
                    "clientPhone": "1234567811",
                    "appointmentDate": "2023-08-02",
                    "appointmentTime": "09:00",
                    "createdAt": "2023-07-20T12:00:00Z",
                    "updatedAt": "2023-07-22T12:00:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to delete appointment",
                    "code": "scheduler-repository.deleteAppt",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },

    "/record/create": {
      "post": {
        "summary": "Create a new record",
        "description": "Route to professionals create new record",
        "tags": ["Record"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "query",
            "description": "Appointment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecord"
              },
              "example": {
                "record": "During the therapy session, Riley demonstrated a good ability to communicate and express her emotions. She described her feelings clearly and identified specific triggers for her anxiety, such as tight deadlines at work and interpersonal conflicts."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewRecord"
                },
                "example": {
                  "recordId": "25678210",
                  "clientName": "Riley Doe",
                  "scheduledDate": "2023-08-03",
                  "appointmentTime": "09:00",
                  "createdAt": "2023-07-20T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "Missing parameter",
                    "value": {
                      "error": {
                        "message": "missing query parameter [professionalId, appointmentId]",
                        "code": "record-module.createRecordService",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid parameter",
                    "value": {
                      "error": {
                        "message": "invalid 'appointmentId'",
                        "code": "record-module.createRecordService",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "a record for this appointment already exists",
                    "code": "record-repository.createRecord",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "cannot create a record before the appointment date",
                    "code": "record-module.createRecordService",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Failed do encrypt record",
                    "value": {
                      "error": {
                        "message": "generic error",
                        "code": "record-module.createRecordService",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Failed to create record",
                    "value": {
                      "error": {
                        "message": "failed to create record",
                        "code": "record-repository.createRecord",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/record/all": {
      "get": {
        "summary": "Get all records",
        "description": "Route to professionals get all clients records",
        "tags": ["Record"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllRecords"
                },
                "example": {
                  "records": [
                    {
                      "recordId": "25678210",
                      "clientName": "Riley Doe",
                      "scheduledDate": "2023-08-03",
                      "appointmentTime": "09:00",
                      "createdAt": "2023-07-20T12:00:00Z",
                      "updatedAt": "2023-07-20T12:00:00Z"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "missing query parameter [professionalId]",
                    "code": "record-module.createRecordService",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to get records",
                    "code": "record-repository.getAllRecords",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/record/:id": {
      "get": {
        "summary": "Get one record",
        "description": "Route to professionals get a client record",
        "tags": ["Record"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "record id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Record"
                },
                "example": {
                  "recordId": "25678210",
                  "clientName": "Riley Doe",
                  "scheduledDate": "2023-08-03",
                  "appointmentTime": "09:00",
                  "record": "During the therapy session, Riley demonstrated a good ability to communicate and express her emotions. She described her feelings clearly and identified specific triggers for her anxiety, such as tight deadlines at work and interpersonal conflicts.",
                  "createdAt": "2023-07-20T12:00:00Z",
                  "updatedAt": "2023-07-20T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "missing query parameter [professionalId]",
                    "code": "record-module.createRecordService",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "record does not belong to the specified 'professionalId'",
                    "code": "record-module.getRecordService",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Failed to decrypt record",
                    "value": {
                      "error": {
                        "message": "generic error",
                        "code": "record-module.GetOneRecordService",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Failed to get record",
                    "value": {
                      "error": {
                        "message": "failed to get record",
                        "code": "record-repository.getOneRecord",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/record/update/:id": {
      "patch": {
        "summary": "Update a record",
        "description": "Route to update client record",
        "tags": ["Record"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "record id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecord"
              },
              "example": {
                "record": "During the therapy sessions, Riley continued to show improvement in her communication and emotional expression. She became more comfortable discussing her emotions and exploring their underlying causes. Riley shared her recent experiences of managing work-related stress and handling conflicts with her colleagues. She demonstrated a growing awareness of her emotional triggers and coping strategies to deal with anxiety. The therapy sessions provided a supportive environment for Riley to explore and develop her emotional intelligence, and she actively engaged in the process of self-discovery and personal growth."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedRecord"
                },
                "example": {
                  "id": "25678210",
                  "record": "During the therapy sessions, Riley continued to show improvement in her communication and emotional expression. She became more comfortable discussing her emotions and exploring their underlying causes. Riley shared her recent experiences of managing work-related stress and handling conflicts with her colleagues. She demonstrated a growing awareness of her emotional triggers and coping strategies to deal with anxiety. The therapy sessions provided a supportive environment for Riley to explore and develop her emotional intelligence, and she actively engaged in the process of self-discovery and personal growth.",
                  "createdAt": "2023-07-20T12:00:00Z",
                  "updatedAt": "2023-07-27T12:00:00Z"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Failed to encrypt record",
                    "value": {
                      "error": {
                        "message": "generic error",
                        "code": "record-module.UpdateRecordService",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Failed to update record",
                    "value": {
                      "error": {
                        "message": "failed to update record",
                        "code": "record-repository.updateRecord",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/record/config/reencrypt-records": {
      "patch": {
        "summary": "Reencrypt records",
        "description": "Route to reencrypt all database records before change .env secrets",
        "tags": ["Record"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReencryptedRecords"
                },
                "example": {
                  "message": "Records reencrypted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Failed do reencrypt records",
                    "value": {
                      "error": {
                        "message": "generic error",
                        "code": "record-module.reencryptRecordsService",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Failed to get record",
                    "value": {
                      "error": {
                        "message": "failed to get record",
                        "code": "record-repository.allRecords",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "Failed to update record",
                    "value": {
                      "error": {
                        "message": "failed to update record",
                        "code": "record-repository.updateAllRecords",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/payment/create": {
      "post": {
        "summary": "Create a new payment",
        "description": "Route to professionals create new payments for appointments",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "query",
            "description": "Appointment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayment"
              },
              "examples": {
                "example1": {
                  "summary": "create new payment",
                  "value": {
                    "paymentDate": "2023-08-06",
                    "paymentMethod": "PIX",
                    "status": "PAID",
                    "totalPaid": "100.00"
                  }
                },
                "example2": {
                  "summary": "open a payment",
                  "value": {
                    "status": "OPEN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPaymentResponse"
                },
                "examples": {
                  "example1": {
                    "summary": "payment created",
                    "value": {
                      "id": "27409ea2-ca57-445e-9666-bfd98c8f2519",
                      "totalPaid": "100.00",
                      "paymentDate": "2023-08-06",
                      "status": "PAID",
                      "createdAt": "2023-08-07T14:28:24.047Z",
                      "updatedAt": "2023-08-07T14:28:24.047Z"
                    }
                  },
                  "example2": {
                    "summary": "opened payment",
                    "value": {
                      "id": "27409ea2-ca57-445e-9666-bfd98c8f2519",
                      "status": "OPEN",
                      "createdAt": "2023-08-07T14:28:24.047Z",
                      "updatedAt": "2023-08-07T14:28:24.047Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "Invalid parameter professionalId",
                    "value": {
                      "error": {
                        "message": "Missing or invalid query parameter: professionalId'",
                        "code": "payment-service.createPayment",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid parameter appointmentId",
                    "value": {
                      "error": {
                        "message": "Missing or invalid query parameter: appointmentsIds",
                        "code": "payment-service.createPayment",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "Open payment invalid body request",
                    "value": {
                      "error": {
                        "message": "The properties totalPaid, paymentDate, and paymentMethod are not allowed when the status is OPEN",
                        "code": "payment-service.createPayment",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "Create payment invalid body request",
                    "value": {
                      "error": {
                        "message": "missing values for fields: ['totalPaid', 'paymentDate', 'paymentMethod']",
                        "code": "payment-service.createPayment",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "a payment for this appointment already exists",
                    "code": "payment-repository.createPayment",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "payment not created",
                    "code": "payment-repository.createPayment'",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/payment/create-many": {
      "post": {
        "summary": "Create new payments",
        "description": "Route to professionals create many payments for appointments at once",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "professionalId",
            "in": "query",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentsIds",
            "in": "query",
            "description": "Appointments ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentsIds",
            "in": "query",
            "description": "Appointments ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayment"
              },
              "examples": {
                "example1": {
                  "summary": "create new payment",
                  "value": {
                    "paymentDate": "2023-08-06",
                    "paymentMethod": "PIX",
                    "status": "PAID",
                    "totalPaid": "300.00"
                  }
                },
                "example2": {
                  "summary": "open a payment",
                  "value": {
                    "status": "OPEN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payments created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManyPaymentsResponse"
                },
                "examples": {
                  "example1": {
                    "summary": "payments created",
                    "value": {
                      "payments": [
                        {
                          "id": "27409ea2-ca57-445e-9666-bfd98c8f2519",
                          "totalPaid": "150.00",
                          "paymentDate": "2023-08-06",
                          "status": "PAID",
                          "createdAt": "2023-08-07T14:28:24.047Z",
                          "updatedAt": "2023-08-07T14:28:24.047Z"
                        },
                        {
                          "id": "27409ea2-ca57-445e-ca45e-579669ea68",
                          "totalPaid": "150.00",
                          "paymentDate": "2023-08-06",
                          "status": "PAID",
                          "createdAt": "2023-08-07T14:28:24.047Z",
                          "updatedAt": "2023-08-07T14:28:24.047Z"
                        }
                      ]
                    }
                  },
                  "example2": {
                    "summary": "opened payment",
                    "value": {
                      "payments": [
                        {
                          "id": "27409ea2-ca57-445e-9666-bfd98c8f2519",
                          "status": "OPEN",
                          "createdAt": "2023-08-07T14:28:24.047Z",
                          "updatedAt": "2023-08-07T14:28:24.047Z"
                        },
                        {
                          "id": "27409ea2-ca57-445e-ca45e-579669ea68b",
                          "status": "OPEN",
                          "createdAt": "2023-08-07T14:28:24.047Z",
                          "updatedAt": "2023-08-07T14:28:24.047Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "Invalid parameter professionalId",
                    "value": {
                      "error": {
                        "message": "Missing or invalid query parameter: professionalId'",
                        "code": "payment-service.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid parameter appointmentId",
                    "value": {
                      "error": {
                        "message": "Missing or invalid query parameter: appointmentsIds",
                        "code": "payment-service.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "Open payment invalid body request",
                    "value": {
                      "error": {
                        "message": "The properties totalPaid, paymentDate, and paymentMethod are not allowed when the status is OPEN",
                        "code": "payment-service.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "Create payment invalid body request",
                    "value": {
                      "error": {
                        "message": "missing values for fields: ['totalPaid', 'paymentDate', 'paymentMethod']",
                        "code": "payment-service.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example5": {
                    "summary": "Open payment invalid body request",
                    "value": {
                      "error": {
                        "message": "payment already exists for appointmentId: `appointmenId`",
                        "code": "payment-repository.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "payments not created",
                    "code": "payment-repository.createManyPayments'",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/payment/get/filter/:id": {
      "get": {
        "summary": "Find payments by filter",
        "description": "Route to find payments by filter",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "query",
            "description": "appointment id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "name of the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "payment status: OPEN or PAID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentDateFrom",
            "in": "query",
            "description": "payments made from a date till now",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentDateUntil",
            "in": "query",
            "description": "payments made until a date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsByFilterResponse"
                },
                "examples": {
                  "example1": {
                    "summary": "payments created",
                    "value": {
                      "payments": [
                        {
                          "id": "48a325a6-736c-4248-b931-14e5891082fa",
                          "appointmentId": "154d71e2-49e0-4ed6-bb7d-885d98d4ce5c",
                          "appointmentDate": "2023-08-06",
                          "clientName": "Riley Doe",
                          "paymentDate": "2023-08-07",
                          "paymentMethod": "CASH",
                          "totalPaid": "314.00",
                          "status": "PAID",
                          "createdAt": "2023-08-07T22:36:35.447Z",
                          "updatedAt": "2023-08-07T22:36:35.447Z"
                        }
                      ]
                    }
                  },
                  "example2": {
                    "summary": "opened payment",
                    "value": {
                      "payments": [
                        {
                          "id": "48a325a6-736c-4248-b931-14e5891082fa",
                          "appointmentId": "154d71e2-49e0-4ed6-bb7d-885d98d4ce5c",
                          "appointmentDate": "2023-08-06",
                          "clientName": "Riley Doe",
                          "status": "OPEN",
                          "createdAt": "2023-08-07T22:36:35.447Z",
                          "updatedAt": "2023-08-07T22:36:35.447Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "Invalid parameter professionalId",
                    "value": {
                      "error": {
                        "message": "Missing or invalid query parameter: professionalId",
                        "code": "payment-service.createManyPayments",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to get payment",
                    "code": "payment-repository.getPaymentByFilter'",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/payment/:id": {
      "get": {
        "summary": "Find payment by id",
        "description": "Route to get payment by id",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Payment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentByIdResponse"
                },
                "example": {
                  "id": "48a325a6-736c-4248-b931-14e5891082fa",
                  "appointmentId": "154d71e2-49e0-4ed6-bb7d-885d98d4ce5c",
                  "professionalId": "49616889-0213-4a54-aad2-9cb72c85e097",
                  "paymentDate": "2023-08-07",
                  "paymentMethod": "CASH",
                  "totalPaid": "314.00",
                  "status": "PAID",
                  "createdAt": "2023-08-07T22:36:35.447Z",
                  "updatedAt": "2023-08-07T22:36:35.447Z"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to get payment",
                    "code": "payment-repository.getPaymentById",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/payment/update/:id": {
      "patch": {
        "summary": "Update a payment",
        "description": "Route to update payments data",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "payment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayment"
              },
              "examples": {
                "example1": {
                  "summary": "Updating an opened payment",
                  "value": {
                    "paymentDate": "2023-08-11",
                    "paymentMethod": "PIX",
                    "totalPaid": "180.00",
                    "status": "PAID"
                  }
                },
                "example2": {
                  "summary": "Updating total paid",
                  "value": {
                    "totalPaid": "180.00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentByIdResponse"
                },
                "examples": {
                  "example1": {
                    "summary": "closed payment",
                    "value": {
                      "id": "48a325a6-736c-4248-b931-14e5891082fa",
                      "appointmentId": "154d71e2-49e0-4ed6-bb7d-885d98d4ce5c",
                      "professionalId": "49616889-0213-4a54-aad2-9cb72c85e097",
                      "paymentDate": "2023-08-11",
                      "paymentMethod": "PIX",
                      "totalPaid": "180.00",
                      "status": "PAID",
                      "createdAt": "2023-08-11T22:36:35.447Z",
                      "updatedAt": "2023-08-12T22:36:35.447Z"
                    }
                  },
                  "example2": {
                    "summary": "opened payment",
                    "value": {
                      "id": "48a325a6-736c-4248-b931-14e5891082fa",
                      "appointmentId": "154d71e2-49e0-4ed6-bb7d-885d98d4ce5c",
                      "professionalId": "49616889-0213-4a54-aad2-9cb72c85e097",
                      "paymentDate": null,
                      "paymentMethod": null,
                      "totalPaid": null,
                      "status": "OPEN",
                      "createdAt": "2023-08-11T22:36:35.447Z",
                      "updatedAt": "2023-08-12T22:36:35.447Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Updating open payment invalid body request",
                    "value": {
                      "error": {
                        "message": "The properties totalPaid, paymentDate, and paymentMethod are not allowed when the status payment is OPEN",
                        "code": "payment-service.updatePayment",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Updating open payment to closed invalid body request",
                    "value": {
                      "error": {
                        "message": "missing values for fields: ['totalPaid', 'paymentDate', 'paymentMethod']",
                        "code": "payment-service.updatePayment",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "generic error",
                    "code": "payment-repository.updatePayment",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignUp": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 125,
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "maxLength": 125,
            "description": "Last name of the user"
          },
          "socialName": {
            "type": "string",
            "maxLength": 250,
            "description": "Social name of the user"
          },
          "username": {
            "type": "string",
            "maxLength": 45,
            "description": "Username of the user"
          },
          "bornDate": {
            "type": "string",
            "format": "date",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "maxLength": 250,
            "description": "Mother's name of the user"
          },
          "email": {
            "type": "string",
            "maxLength": 250,
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "password": {
            "type": "string",
            "minLength": 7,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d|\\W).+$",
            "description": "Password of the user. It must have at least one uppercase letter, one lowercase letter, and one number or special character."
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Password confirmation"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "motherName",
          "email",
          "password",
          "passwordConfirmation"
        ]
      },
      "UserData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "socialName": {
            "type": "string",
            "description": "Social name of the user"
          },
          "bornDate": {
            "type": "string",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "status": {
            "type": "string",
            "description": "User status"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of user update"
          }
        }
      },
      "ProfessionalClients": {
        "type": "object",
        "properties": {
          "professionalId": {
            "type": "string",
            "description": "Professional ID"
          },
          "clients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Client ID"
                },
                "name": {
                  "type": "string",
                  "description": "Client name"
                },
                "phone": {
                  "type": "string",
                  "description": "Client phone number"
                }
              }
            }
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "personal": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "First name of the user"
              },
              "lastName": {
                "type": "string",
                "description": "Last name of the user"
              },
              "socialName": {
                "type": "string",
                "description": "Social name of the user"
              },
              "bornDate": {
                "type": "string",
                "description": "Date of birth of the user"
              },
              "motherName": {
                "type": "string",
                "description": "Mother's name of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "contact": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the user"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user"
              },
              "phone": {
                "type": "string",
                "description": "Phone number of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "User status"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last user update"
          }
        }
      },
      "UpdatedUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "personal": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "First name of the user"
              },
              "lastName": {
                "type": "string",
                "description": "Last name of the user"
              },
              "socialName": {
                "type": "string",
                "description": "Social name of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of user personal data update"
              }
            }
          },
          "contact": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the user"
              },
              "email": {
                "type": "string",
                "description": "Email of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of user contact data update"
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "User account status"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of user security data update"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of user update"
          }
        }
      },
      "UserCredentials": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "description": "Password of the user"
          }
        }
      },
      "CreateAppointment": {
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string",
            "description": "Name of the client"
          },
          "clientPhone": {
            "type": "string",
            "description": "Client phone number"
          },
          "appointmentDate": {
            "type": "string",
            "description": "Date to be scheduled"
          },
          "appointmentTime": {
            "type": "string",
            "description": "Time to be scheduled"
          }
        }
      },
      "NewAppointment": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Appointment ID"
          },
          "professionalId": {
            "type": "string",
            "description": "Professional ID"
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client"
          },
          "clientPhone": {
            "type": "string",
            "description": "Client phone number"
          },
          "appointmentDate": {
            "type": "string",
            "description": "Date to be scheduled"
          },
          "appointmentTime": {
            "type": "string",
            "description": "Time to be scheduled"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of appointment creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of appointment update"
          }
        }
      },
      "ProfessionalAppointments": {
        "type": "object",
        "properties": {
          "appointments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Appointment ID"
                },
                "professionalId": {
                  "type": "string",
                  "description": "Professional ID"
                },
                "clientName": {
                  "type": "string",
                  "description": "Name of the client"
                },
                "clientPhone": {
                  "type": "string",
                  "description": "Client phone number"
                },
                "appointmentDate": {
                  "type": "string",
                  "description": "Date to be scheduled"
                },
                "appointmentTime": {
                  "type": "string",
                  "description": "Time to be scheduled"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date and time of appointment creation"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Date and time of appointment update"
                }
              }
            }
          }
        }
      },
      "UpdateAppointment": {
        "properties": {
          "clientPhone": {
            "type": "string",
            "description": "Client phone number"
          },
          "appointmentDate": {
            "type": "string",
            "description": "Date to be scheduled"
          },
          "appointmentTime": {
            "type": "string",
            "description": "Time to be scheduled"
          }
        }
      },
      "DeletedAppointment": {
        "type": "object",
        "properties": {
          "Appointment deleted": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Appointment ID"
              },
              "professionalId": {
                "type": "string",
                "description": "Professional ID"
              },
              "clientName": {
                "type": "string",
                "description": "Name of the client"
              },
              "clientPhone": {
                "type": "string",
                "description": "Client phone number"
              },
              "appointmentDate": {
                "type": "string",
                "description": "Date to be scheduled"
              },
              "appointmentTime": {
                "type": "string",
                "description": "Time to be scheduled"
              },
              "createdAt": {
                "type": "string",
                "description": "Date and time of appointment creation"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of appointment update"
              }
            }
          }
        }
      },
      "CreateRecord": {
        "type": "object",
        "properties": {
          "record": {
            "type": "string",
            "description": "Comprehensive and essential information about a patient's health and medical history"
          }
        }
      },
      "NewRecord": {
        "type": "object",
        "properties": {
          "recordId": {
            "type": "string",
            "description": "Record ID"
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client"
          },
          "scheduledDate": {
            "type": "string",
            "description": "Scheduled appointment date"
          },
          "appointmentTime": {
            "type": "string",
            "description": "Time to be scheduled"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of record creation"
          }
        }
      },
      "AllRecords": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recordId": {
                  "type": "string",
                  "description": "Record ID"
                },
                "clientName": {
                  "type": "string",
                  "description": "Name of the client"
                },
                "scheduledDate": {
                  "type": "string",
                  "description": "Scheduled appointment date"
                },
                "appointmentTime": {
                  "type": "string",
                  "description": "Time to be scheduled"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date and time of record creation"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Date and time of record update"
                }
              }
            }
          }
        }
      },
      "Record": {
        "type": "object",
        "properties": {
          "recordId": {
            "type": "string",
            "description": "Record ID"
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client"
          },
          "scheduledDate": {
            "type": "string",
            "description": "Scheduled appointment date"
          },
          "appointmentTime": {
            "type": "string",
            "description": "Time to be scheduled"
          },
          "record": {
            "type": "string",
            "description": "Comprehensive and essential information about a patient's health and medical history"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of record creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of record update"
          }
        }
      },
      "UpdatedRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Record ID"
          },
          "record": {
            "type": "string",
            "description": "Comprehensive and essential information about a patient's health and medical history"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of record creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of record update"
          }
        }
      },
      "CreatePayment": {
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "string",
            "description": "Appointment payment date"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method, PIX or CASH"
          },
          "status": {
            "type": "string",
            "description": "Payment status, OPEN or PAID"
          },
          "totalPaid": {
            "type": "string",
            "description": "Total paid for the appointment"
          }
        },
        "required": ["status"]
      },
      "NewPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment ID"
          },
          "paymentDate": {
            "type": "string",
            "description": "Appointment payment date"
          },
          "status": {
            "type": "string",
            "description": "Payment status, OPEN or PAID"
          },
          "totalPaid": {
            "type": "string",
            "description": "Total paid for the appointment"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of payment creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of payment update"
          }
        }
      },
      "ManyPaymentsResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Payment ID"
                },
                "paymentDate": {
                  "type": "string",
                  "description": "Appointment payment date"
                },
                "status": {
                  "type": "string",
                  "description": "Payment status, OPEN or PAID"
                },
                "totalPaid": {
                  "type": "string",
                  "description": "Total paid for the appointment"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date and time of payment creation"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Date and time of payment update"
                }
              }
            }
          }
        }
      },
      "PaymentsByFilterResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Payment ID"
                },
                "appointmentId": {
                  "type": "string",
                  "description": "Appointment ID"
                },
                "appointmentDate": {
                  "type": "string",
                  "description": "Date of the appointment"
                },
                "clientName": {
                  "type": "string",
                  "description": "Name of the client"
                },
                "paymentDate": {
                  "type": "string",
                  "description": "Appointment payment date"
                },
                "paymentMethod": {
                  "type": "string",
                  "description": "Payment method PIX or CASH"
                },
                "status": {
                  "type": "string",
                  "description": "Payment status, OPEN or PAID"
                },
                "totalPaid": {
                  "type": "string",
                  "description": "Total paid for the appointment"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date and time of payment creation"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Date and time of payment update"
                }
              }
            }
          }
        }
      },
      "GetPaymentByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment ID"
          },
          "appointmentId": {
            "type": "string",
            "description": "Appointment ID"
          },
          "professionalId": {
            "type": "string",
            "description": "Professional ID"
          },
          "paymentDate": {
            "type": "string",
            "description": "Appointment payment date"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method PIX or CASH"
          },
          "status": {
            "type": "string",
            "description": "Payment status, OPEN or PAID"
          },
          "totalPaid": {
            "type": "string",
            "description": "Total paid for the appointment"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of payment creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of payment update"
          }
        }
      },
      "UpdatePayment": {
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "string",
            "description": "Appointment payment date"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method PIX or CASH"
          },
          "status": {
            "type": "string",
            "description": "Payment status, OPEN or PAID"
          },
          "totalPaid": {
            "type": "string",
            "description": "Total paid for the appointment"
          }
        }
      },
      "ReencryptedRecords": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Reencryption response"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "status": {
                "type": "boolean",
                "description": "Error status"
              }
            }
          },
          "data": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token used for authentication in subsequent API calls. This token should be included in the 'Authorization' header as a Bearer Token"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
