{
  "openapi": "3.0.0",
  "info": {
    "title": "LUMIN Backend API Documentation",
    "description": "Back-end API to manage appointment records and streamline payment transactions for healthcare professionals.",
    "contact": {
      "name": "Rafael Ribeiro",
      "url": "https://www.wophi.be/lumin/support",
      "email": "lumin@wophi.be"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/users/admin": {
      "post": {
        "summary": "Create a new admin user",
        "description": "Route to register new admin users",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              },
              "examples": {
                "example1": {
                  "summary": "Example of a valid user registration",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "JD",
                    "username": "johndoe",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "email": "johndoe@example.com",
                    "phone": "1234567890",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                },
                "example2": {
                  "summary": "Example of required fields only",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "motherName": "Jane Doe",
                    "email": "johndoe@example.com",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": "123456",
                  "almaId": "78910",
                  "name": "John Doe",
                  "socialName": "JD",
                  "email": "johndoe@example.com",
                  "role": "ADMIN",
                  "createdAt": "2023-07-18T12:00:00Z",
                  "updatedAt": "2023-07-18T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": ["One or more fields are missing or invalid"],
                    "code": "bad.request",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not created",
                    "code": "user-repository.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/client": {
      "post": {
        "summary": "Create a new client user",
        "description": "Route to register new client users",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              },
              "examples": {
                "example1": {
                  "summary": "Example of a valid user registration",
                  "value": {
                    "firstName": "Riley",
                    "lastName": "Doe",
                    "socialName": "RD",
                    "username": "rileydoe",
                    "bornDate": "1991-01-01",
                    "motherName": "Jane Doe",
                    "email": "rileydoe@example.com",
                    "phone": "1234567890",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                },
                "example2": {
                  "summary": "Example of required fields only",
                  "value": {
                    "firstName": "Riley",
                    "lastName": "Doe",
                    "motherName": "Jane Doe",
                    "email": "rileydoe@example.com",
                    "password": "password123",
                    "passwordConfirmation": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": "78910",
                  "almaId": "123456",
                  "name": "Riley Doe",
                  "socialName": "RD",
                  "email": "rileydoe@example.com",
                  "role": "CLIENT",
                  "createdAt": "2023-07-18T12:00:00Z",
                  "updatedAt": "2023-07-18T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": ["One or more fields are missing or invalid"],
                    "code": "bad.request",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not created",
                    "code": "user-repository.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/user/{id}": {
      "get": {
        "summary": "Get user by id",
        "description": "Route to get an user by id",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                },
                "example": {
                  "id": "123456",
                  "name": "Riley Doe",
                  "socialName": "RD",
                  "bornDate": "1991-01-01",
                  "motherName": "Jane Doe",
                  "email": "rileydoe@example.com",
                  "phone": "1234567890",
                  "status": "ACTIVE",
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-11T12:00:00Z"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "could not get user",
                    "code": "user-repository.getUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/professional/{id}": {
      "get": {
        "summary": "Get professional clients",
        "description": "Route to get all professional clients",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Professional id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Professional clients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalClients"
                },
                "example": {
                  "professionalId": "314",
                  "clients": [
                    {
                      "id": "123456",
                      "name": "Riley Doe",
                      "phone": "1234567890"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Insufficient privilege to access this route",
                    "code": "auth-repository.roleGuard",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "could not get clients",
                    "code": "user-repository.getClients",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/update/{id}": {
      "patch": {
        "summary": "Update user info",
        "description": "Route to update user data",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "examples": {
                "example1": {
                  "summary": "Example of updating password",
                  "value": {
                    "oldPassword": "password123",
                    "newPassword": "newpassword",
                    "passwordConfirmation": "newpassword"
                  }
                },
                "example2": {
                  "summary": "Example of updating username",
                  "value": {
                    "username": "RDJ"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedUser"
                },
                "example": {
                  "id": "123456",
                  "personal": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "RDJ",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "contact": {
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "updatedAt": "2023-05-13T12:00:00Z"
                  },
                  "security": {
                    "status": "ACTIVE",
                    "updatedAt": "2023-05-11T12:00:00Z"
                  },
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-13T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "missing old password propertie",
                    "value": {
                      "error": {
                        "message": "missing 'oldPassword' field",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "new passwords do not match",
                    "value": {
                      "error": {
                        "message": "new passwords do not match",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "old passwords do not match",
                    "value": {
                      "error": {
                        "message": "old passwords do not match",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "conflict",
                    "value": {
                      "error": {
                        "message": "email/phone already taken",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example5": {
                    "summary": "not modified",
                    "value": {
                      "error": {
                        "message": "user not updated",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not updated",
                    "code": "user-repository.updateUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignUp": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 125,
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "maxLength": 125,
            "description": "Last name of the user"
          },
          "socialName": {
            "type": "string",
            "maxLength": 250,
            "description": "Social name of the user"
          },
          "username": {
            "type": "string",
            "maxLength": 45,
            "description": "Username of the user"
          },
          "bornDate": {
            "type": "string",
            "formate": "date",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "maxLength": 250,
            "description": "Mother's name of the user"
          },
          "email": {
            "type": "string",
            "maxLength": 250,
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "password": {
            "type": "string",
            "minLength": "7",
            "pattern": "at least one uppercase letter, one lowercase letter and one number or symbol",
            "description": "Password of the user"
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Password confirmation"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "motherName",
          "email",
          "password",
          "passwordConfirmation"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "almaId": {
            "type": "string",
            "description": "User alma ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "socialName": {
            "type": "string",
            "description": "Social name of the user"
          },
          "email": {
            "type": "string",
            "description": "email of the user"
          },
          "role": {
            "type": "string",
            "description": "role of the user"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of user creation"
          }
        }
      },
      "UserData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "socialName": {
            "type": "string",
            "description": "Social name of the user"
          },
          "bornDate": {
            "type": "string",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "email of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "status": {
            "type": "string",
            "description": "User status"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of user creation"
          }
        }
      },
      "ProfessionalClients": {
        "type": "object",
        "properties": {
          "professionalId": {
            "type": "string",
            "description": "Professional ID"
          },
          "clients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Client ID"
                },
                "name": {
                  "type": "string",
                  "description": "Client name"
                },
                "phone": {
                  "type": "string",
                  "description": "Client phone number"
                }
              }
            }
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "personal": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "First name of the user"
              },
              "lastName": {
                "type": "string",
                "description": "Last name of the user"
              },
              "socialName": {
                "type": "string",
                "description": "Social name of the user"
              },
              "bornDate": {
                "type": "string",
                "description": "Date of birth of the user"
              },
              "motherName": {
                "type": "string",
                "description": "Mother's name of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "contact": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the user"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user"
              },
              "phone": {
                "type": "string",
                "description": "Phone number of the user"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "User status"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date and time of last user update"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last user update"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "status": {
                "type": "boolean",
                "description": "Error status"
              }
            }
          },
          "data": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token used for authentication in subsequent API calls. This token should be included in the 'Authorization' header as a Bearer Token"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
